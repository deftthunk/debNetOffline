#!/bin/bash
#
# Usage:
# ./debNetOffline.sh [-d] FILE.iso [FILE2.iso]... [preseed.cfg]
#
# '-d' dumps the preseed.cfg file to the local directory
#
# Preseed.cfg can be placed in the local directory or passed
# to the script as last argument. If not found, script uses default
# preseed embedded below


tmpdir=`mktemp -d`
preseed_location=''
preseed_tmp_flag=0

# pulls Debian version off /dists/stable/Release
getVersion () {
	version=`grep -oP -m1 '(?<=Version\: )(\d\d?\.\d\d?)' "$tmpdir/dists/stable/Release"`
	echo $version
}

# Modifies /isolinux/txt.cfg to append new boot options pointing to our preseed.cfg
fixTxtCfg () {
	text=' priority=high file=/cdrom/preseed.cfg '
	sed -i "s|^.*append\(.*\)$|\tappend$text\1|g" "$tmpdir/isolinux/txt.cfg"
}

main () {
	if [[ $# -eq 0 ]]; then
		echo "~$ ./script.sh FILE.iso [FILE2.iso]... [preseed.cfg]"
		echo " -or-"
		echo "~$ ./script.sh -d    (( dumps preseed.cfg example ))"
		exit
	fi

	cmd1=`command -v bsdtar`
	cmd2=`command -v genisoimage`
	
	if [[ ! $cmd1 || ! $cmd2 ]]; then
		echo Install 'bsdtar' and 'genisoimage'
		exit
	fi
	if [[ $1 == '-d' ]]; then
		echo $preseed_default | base64 -di - > preseed.cfg
		exit
	fi

	# check if user has placed a preseed.cfg file in the local dir or
	# provided one as the last argument to the script. If neither, script
	# uses internal 'preseed.cfg' file (b64 encoded)
	preseed_cli=`basename ${@:$#}`
	if [[ -f "./preseed.cfg" ]]; then
		preseed_location="$(pwd)/preseed.cfg"
	elif [[ $preseed_cli == "preseed.cfg" ]]; then
		preseed_location=$preseed_cli
	else
		echo $preseed_default | base64 -d -i - > preseed.cfg
		preseed_location="$(pwd)/preseed.cfg"
		preseed_tmp_flag=1
	fi
	
	for image in $@; do
		if [[ ${image##*.} == "iso" ]]; then
			cat $image | bsdtar -C $tmpdir -xf -
			chmod -R +w $tmpdir
			cp $preseed_location $tmpdir

			fixTxtCfg
			version=$(getVersion)

			genisoimage -r -J -b "isolinux/isolinux.bin" -c "isolinux/boot.cat" \
				-no-emul-boot -boot-load-size 4 -boot-info-table -o \
				"debian-ESD_mirror-$version-amd64-netinst.iso" $tmpdir
			rm -rf "$tmpdir/*"
		fi
	done

	
	if [[ $preseed_tmp_flag -eq 1 ]]; then
		echo Cleaning up temporary files...
		rm preseed.cfg
	fi

	rm -rf $tmpdir
}

# preseed.cfg file for Debian 9; makes internal "unauthenticated" mirrors accessible
# during Debian installation process
preseed_default='IyMjIyBDb250ZW50cyBvZiB0aGUgcHJlY29uZmlndXJhdGlvbiBmaWxlIChmb3Igc3RyZXRjaCkK
IyMjIExvY2FsaXphdGlvbgojIFByZXNlZWRpbmcgb25seSBsb2NhbGUgc2V0cyBsYW5ndWFnZSwg
Y291bnRyeSBhbmQgbG9jYWxlLgojZC1pIGRlYmlhbi1pbnN0YWxsZXIvbG9jYWxlIHN0cmluZyBl
bl9VUwoKIyBUaGUgdmFsdWVzIGNhbiBhbHNvIGJlIHByZXNlZWRlZCBpbmRpdmlkdWFsbHkgZm9y
IGdyZWF0ZXIgZmxleGliaWxpdHkuCiNkLWkgZGViaWFuLWluc3RhbGxlci9sYW5ndWFnZSBzdHJp
bmcgZW4KI2QtaSBkZWJpYW4taW5zdGFsbGVyL2NvdW50cnkgc3RyaW5nIE5MCiNkLWkgZGViaWFu
LWluc3RhbGxlci9sb2NhbGUgc3RyaW5nIGVuX0dCLlVURi04CiMgT3B0aW9uYWxseSBzcGVjaWZ5
IGFkZGl0aW9uYWwgbG9jYWxlcyB0byBiZSBnZW5lcmF0ZWQuCiNkLWkgbG9jYWxlY2hvb3Nlci9z
dXBwb3J0ZWQtbG9jYWxlcyBtdWx0aXNlbGVjdCBlbl9VUy5VVEYtOCwgbmxfTkwuVVRGLTgKCiMg
S2V5Ym9hcmQgc2VsZWN0aW9uLgojZC1pIGtleWJvYXJkLWNvbmZpZ3VyYXRpb24veGtiLWtleW1h
cCBzZWxlY3QgdXMKIyBkLWkga2V5Ym9hcmQtY29uZmlndXJhdGlvbi90b2dnbGUgc2VsZWN0IE5v
IHRvZ2dsaW5nCgojIyMgTmV0d29yayBjb25maWd1cmF0aW9uCiMgRGlzYWJsZSBuZXR3b3JrIGNv
bmZpZ3VyYXRpb24gZW50aXJlbHkuIFRoaXMgaXMgdXNlZnVsIGZvciBjZHJvbQojIGluc3RhbGxh
dGlvbnMgb24gbm9uLW5ldHdvcmtlZCBkZXZpY2VzIHdoZXJlIHRoZSBuZXR3b3JrIHF1ZXN0aW9u
cywKIyB3YXJuaW5nIGFuZCBsb25nIHRpbWVvdXRzIGFyZSBhIG51aXNhbmNlLgojZC1pIG5ldGNm
Zy9lbmFibGUgYm9vbGVhbiBmYWxzZQoKIyBuZXRjZmcgd2lsbCBjaG9vc2UgYW4gaW50ZXJmYWNl
IHRoYXQgaGFzIGxpbmsgaWYgcG9zc2libGUuIFRoaXMgbWFrZXMgaXQKIyBza2lwIGRpc3BsYXlp
bmcgYSBsaXN0IGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgaW50ZXJmYWNlLgojZC1pIG5ldGNm
Zy9jaG9vc2VfaW50ZXJmYWNlIHNlbGVjdCBhdXRvCgojIFRvIHBpY2sgYSBwYXJ0aWN1bGFyIGlu
dGVyZmFjZSBpbnN0ZWFkOgojZC1pIG5ldGNmZy9jaG9vc2VfaW50ZXJmYWNlIHNlbGVjdCBldGgx
CgojIFRvIHNldCBhIGRpZmZlcmVudCBsaW5rIGRldGVjdGlvbiB0aW1lb3V0IChkZWZhdWx0IGlz
IDMgc2Vjb25kcykuCiMgVmFsdWVzIGFyZSBpbnRlcnByZXRlZCBhcyBzZWNvbmRzLgojZC1pIG5l
dGNmZy9saW5rX3dhaXRfdGltZW91dCBzdHJpbmcgMTAKCiMgSWYgeW91IGhhdmUgYSBzbG93IGRo
Y3Agc2VydmVyIGFuZCB0aGUgaW5zdGFsbGVyIHRpbWVzIG91dCB3YWl0aW5nIGZvcgojIGl0LCB0
aGlzIG1pZ2h0IGJlIHVzZWZ1bC4KI2QtaSBuZXRjZmcvZGhjcF90aW1lb3V0IHN0cmluZyA2MAoj
ZC1pIG5ldGNmZy9kaGNwdjZfdGltZW91dCBzdHJpbmcgNjAKCiMgSWYgeW91IHByZWZlciB0byBj
b25maWd1cmUgdGhlIG5ldHdvcmsgbWFudWFsbHksIHVuY29tbWVudCB0aGlzIGxpbmUgYW5kCiMg
dGhlIHN0YXRpYyBuZXR3b3JrIGNvbmZpZ3VyYXRpb24gYmVsb3cuCiNkLWkgbmV0Y2ZnL2Rpc2Fi
bGVfYXV0b2NvbmZpZyBib29sZWFuIHRydWUKCiMgSWYgeW91IHdhbnQgdGhlIHByZWNvbmZpZ3Vy
YXRpb24gZmlsZSB0byB3b3JrIG9uIHN5c3RlbXMgYm90aCB3aXRoIGFuZAojIHdpdGhvdXQgYSBk
aGNwIHNlcnZlciwgdW5jb21tZW50IHRoZXNlIGxpbmVzIGFuZCB0aGUgc3RhdGljIG5ldHdvcmsK
IyBjb25maWd1cmF0aW9uIGJlbG93LgojZC1pIG5ldGNmZy9kaGNwX2ZhaWxlZCBub3RlCiNkLWkg
bmV0Y2ZnL2RoY3Bfb3B0aW9ucyBzZWxlY3QgQ29uZmlndXJlIG5ldHdvcmsgbWFudWFsbHkKCiMg
U3RhdGljIG5ldHdvcmsgY29uZmlndXJhdGlvbi4KIwojIElQdjQgZXhhbXBsZQojZC1pIG5ldGNm
Zy9nZXRfaXBhZGRyZXNzIHN0cmluZyAxOTIuMTY4LjEuNDIKI2QtaSBuZXRjZmcvZ2V0X25ldG1h
c2sgc3RyaW5nIDI1NS4yNTUuMjU1LjAKI2QtaSBuZXRjZmcvZ2V0X2dhdGV3YXkgc3RyaW5nIDE5
Mi4xNjguMS4xCiNkLWkgbmV0Y2ZnL2dldF9uYW1lc2VydmVycyBzdHJpbmcgMTkyLjE2OC4xLjEK
I2QtaSBuZXRjZmcvY29uZmlybV9zdGF0aWMgYm9vbGVhbiB0cnVlCiMKIyBJUHY2IGV4YW1wbGUK
I2QtaSBuZXRjZmcvZ2V0X2lwYWRkcmVzcyBzdHJpbmcgZmMwMDo6MgojZC1pIG5ldGNmZy9nZXRf
bmV0bWFzayBzdHJpbmcgZmZmZjpmZmZmOmZmZmY6ZmZmZjo6CiNkLWkgbmV0Y2ZnL2dldF9nYXRl
d2F5IHN0cmluZyBmYzAwOjoxCiNkLWkgbmV0Y2ZnL2dldF9uYW1lc2VydmVycyBzdHJpbmcgZmMw
MDo6MQojZC1pIG5ldGNmZy9jb25maXJtX3N0YXRpYyBib29sZWFuIHRydWUKCiMgQW55IGhvc3Ru
YW1lIGFuZCBkb21haW4gbmFtZXMgYXNzaWduZWQgZnJvbSBkaGNwIHRha2UgcHJlY2VkZW5jZSBv
dmVyCiMgdmFsdWVzIHNldCBoZXJlLiBIb3dldmVyLCBzZXR0aW5nIHRoZSB2YWx1ZXMgc3RpbGwg
cHJldmVudHMgdGhlIHF1ZXN0aW9ucwojIGZyb20gYmVpbmcgc2hvd24sIGV2ZW4gaWYgdmFsdWVz
IGNvbWUgZnJvbSBkaGNwLgojZC1pIG5ldGNmZy9nZXRfaG9zdG5hbWUgc3RyaW5nIHVuYXNzaWdu
ZWQtaG9zdG5hbWUKI2QtaSBuZXRjZmcvZ2V0X2RvbWFpbiBzdHJpbmcgdW5hc3NpZ25lZC1kb21h
aW4KCiMgSWYgeW91IHdhbnQgdG8gZm9yY2UgYSBob3N0bmFtZSwgcmVnYXJkbGVzcyBvZiB3aGF0
IGVpdGhlciB0aGUgREhDUAojIHNlcnZlciByZXR1cm5zIG9yIHdoYXQgdGhlIHJldmVyc2UgRE5T
IGVudHJ5IGZvciB0aGUgSVAgaXMsIHVuY29tbWVudAojIGFuZCBhZGp1c3QgdGhlIGZvbGxvd2lu
ZyBsaW5lLgojZC1pIG5ldGNmZy9ob3N0bmFtZSBzdHJpbmcgc29tZWhvc3QKCiMgRGlzYWJsZSB0
aGF0IGFubm95aW5nIFdFUCBrZXkgZGlhbG9nLgpkLWkgbmV0Y2ZnL3dpcmVsZXNzX3dlcCBzdHJp
bmcKIyBUaGUgd2Fja3kgZGhjcCBob3N0bmFtZSB0aGF0IHNvbWUgSVNQcyB1c2UgYXMgYSBwYXNz
d29yZCBvZiBzb3J0cy4KI2QtaSBuZXRjZmcvZGhjcF9ob3N0bmFtZSBzdHJpbmcgcmFkaXNoCgoj
IElmIG5vbi1mcmVlIGZpcm13YXJlIGlzIG5lZWRlZCBmb3IgdGhlIG5ldHdvcmsgb3Igb3RoZXIg
aGFyZHdhcmUsIHlvdSBjYW4KIyBjb25maWd1cmUgdGhlIGluc3RhbGxlciB0byBhbHdheXMgdHJ5
IHRvIGxvYWQgaXQsIHdpdGhvdXQgcHJvbXB0aW5nLiBPcgojIGNoYW5nZSB0byBmYWxzZSB0byBk
aXNhYmxlIGFza2luZy4KI2QtaSBody1kZXRlY3QvbG9hZF9maXJtd2FyZSBib29sZWFuIHRydWUK
CiMjIyBOZXR3b3JrIGNvbnNvbGUKIyBVc2UgdGhlIGZvbGxvd2luZyBzZXR0aW5ncyBpZiB5b3Ug
d2lzaCB0byBtYWtlIHVzZSBvZiB0aGUgbmV0d29yay1jb25zb2xlCiMgY29tcG9uZW50IGZvciBy
ZW1vdGUgaW5zdGFsbGF0aW9uIG92ZXIgU1NILiBUaGlzIG9ubHkgbWFrZXMgc2Vuc2UgaWYgeW91
CiMgaW50ZW5kIHRvIHBlcmZvcm0gdGhlIHJlbWFpbmRlciBvZiB0aGUgaW5zdGFsbGF0aW9uIG1h
bnVhbGx5LgojZC1pIGFubmEvY2hvb3NlX21vZHVsZXMgc3RyaW5nIG5ldHdvcmstY29uc29sZQoj
ZC1pIG5ldHdvcmstY29uc29sZS9hdXRob3JpemVkX2tleXNfdXJsIHN0cmluZyBodHRwOi8vMTAu
MC4wLjEvb3BlbnNzaC1rZXkKI2QtaSBuZXR3b3JrLWNvbnNvbGUvcGFzc3dvcmQgcGFzc3dvcmQg
cjAwdG1lCiNkLWkgbmV0d29yay1jb25zb2xlL3Bhc3N3b3JkLWFnYWluIHBhc3N3b3JkIHIwMHRt
ZQoKIyMjIE1pcnJvciBzZXR0aW5ncwojIElmIHlvdSBzZWxlY3QgZnRwLCB0aGUgbWlycm9yL2Nv
dW50cnkgc3RyaW5nIGRvZXMgbm90IG5lZWQgdG8gYmUgc2V0LgojZC1pIG1pcnJvci9wcm90b2Nv
bCBzdHJpbmcgZnRwCiNkLWkgbWlycm9yL2NvdW50cnkgc3RyaW5nIG1hbnVhbAojZC1pIG1pcnJv
ci9odHRwL2hvc3RuYW1lIHN0cmluZyBodHRwLnVzLmRlYmlhbi5vcmcKI2QtaSBtaXJyb3IvaHR0
cC9kaXJlY3Rvcnkgc3RyaW5nIC9kZWJpYW4KI2QtaSBtaXJyb3IvaHR0cC9wcm94eSBzdHJpbmcK
CiMgU3VpdGUgdG8gaW5zdGFsbC4KI2QtaSBtaXJyb3Ivc3VpdGUgc3RyaW5nIHRlc3RpbmcKIyBT
dWl0ZSB0byB1c2UgZm9yIGxvYWRpbmcgaW5zdGFsbGVyIGNvbXBvbmVudHMgKG9wdGlvbmFsKS4K
I2QtaSBtaXJyb3IvdWRlYi9zdWl0ZSBzdHJpbmcgdGVzdGluZwoKIyMjIEFjY291bnQgc2V0dXAK
IyBTa2lwIGNyZWF0aW9uIG9mIGEgcm9vdCBhY2NvdW50IChub3JtYWwgdXNlciBhY2NvdW50IHdp
bGwgYmUgYWJsZSB0bwojIHVzZSBzdWRvKS4KI2QtaSBwYXNzd2Qvcm9vdC1sb2dpbiBib29sZWFu
IGZhbHNlCiMgQWx0ZXJuYXRpdmVseSwgdG8gc2tpcCBjcmVhdGlvbiBvZiBhIG5vcm1hbCB1c2Vy
IGFjY291bnQuCiNkLWkgcGFzc3dkL21ha2UtdXNlciBib29sZWFuIGZhbHNlCgojIFJvb3QgcGFz
c3dvcmQsIGVpdGhlciBpbiBjbGVhciB0ZXh0CiNkLWkgcGFzc3dkL3Jvb3QtcGFzc3dvcmQgcGFz
c3dvcmQgcjAwdG1lCiNkLWkgcGFzc3dkL3Jvb3QtcGFzc3dvcmQtYWdhaW4gcGFzc3dvcmQgcjAw
dG1lCiMgb3IgZW5jcnlwdGVkIHVzaW5nIGEgY3J5cHQoMykgIGhhc2guCiNkLWkgcGFzc3dkL3Jv
b3QtcGFzc3dvcmQtY3J5cHRlZCBwYXNzd29yZCBbY3J5cHQoMykgaGFzaF0KCiMgVG8gY3JlYXRl
IGEgbm9ybWFsIHVzZXIgYWNjb3VudC4KI2QtaSBwYXNzd2QvdXNlci1mdWxsbmFtZSBzdHJpbmcg
RGViaWFuIFVzZXIKI2QtaSBwYXNzd2QvdXNlcm5hbWUgc3RyaW5nIGRlYmlhbgojIE5vcm1hbCB1
c2VyJ3MgcGFzc3dvcmQsIGVpdGhlciBpbiBjbGVhciB0ZXh0CiNkLWkgcGFzc3dkL3VzZXItcGFz
c3dvcmQgcGFzc3dvcmQgaW5zZWN1cmUKI2QtaSBwYXNzd2QvdXNlci1wYXNzd29yZC1hZ2FpbiBw
YXNzd29yZCBpbnNlY3VyZQojIG9yIGVuY3J5cHRlZCB1c2luZyBhIGNyeXB0KDMpIGhhc2guCiNk
LWkgcGFzc3dkL3VzZXItcGFzc3dvcmQtY3J5cHRlZCBwYXNzd29yZCBbY3J5cHQoMykgaGFzaF0K
IyBDcmVhdGUgdGhlIGZpcnN0IHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIFVJRCBpbnN0ZWFkIG9m
IHRoZSBkZWZhdWx0LgojZC1pIHBhc3N3ZC91c2VyLXVpZCBzdHJpbmcgMTAxMAoKIyBUaGUgdXNl
ciBhY2NvdW50IHdpbGwgYmUgYWRkZWQgdG8gc29tZSBzdGFuZGFyZCBpbml0aWFsIGdyb3Vwcy4g
VG8KIyBvdmVycmlkZSB0aGF0LCB1c2UgdGhpcy4KI2QtaSBwYXNzd2QvdXNlci1kZWZhdWx0LWdy
b3VwcyBzdHJpbmcgYXVkaW8gY2Ryb20gdmlkZW8KCiMjIyBDbG9jayBhbmQgdGltZSB6b25lIHNl
dHVwCiMgQ29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIGhhcmR3YXJlIGNsb2NrIGlzIHNldCB0
byBVVEMuCiNkLWkgY2xvY2stc2V0dXAvdXRjIGJvb2xlYW4gdHJ1ZQoKIyBZb3UgbWF5IHNldCB0
aGlzIHRvIGFueSB2YWxpZCBzZXR0aW5nIGZvciAkVFo7IHNlZSB0aGUgY29udGVudHMgb2YKIyAv
dXNyL3NoYXJlL3pvbmVpbmZvLyBmb3IgdmFsaWQgdmFsdWVzLgojZC1pIHRpbWUvem9uZSBzdHJp
bmcgVVMvRWFzdGVybgoKIyBDb250cm9scyB3aGV0aGVyIHRvIHVzZSBOVFAgdG8gc2V0IHRoZSBj
bG9jayBkdXJpbmcgdGhlIGluc3RhbGwKI2QtaSBjbG9jay1zZXR1cC9udHAgYm9vbGVhbiB0cnVl
CiMgTlRQIHNlcnZlciB0byB1c2UuIFRoZSBkZWZhdWx0IGlzIGFsbW9zdCBhbHdheXMgZmluZSBo
ZXJlLgojZC1pIGNsb2NrLXNldHVwL250cC1zZXJ2ZXIgc3RyaW5nIG50cC5leGFtcGxlLmNvbQoK
IyMjIFBhcnRpdGlvbmluZwojIyBQYXJ0aXRpb25pbmcgZXhhbXBsZQojIElmIHRoZSBzeXN0ZW0g
aGFzIGZyZWUgc3BhY2UgeW91IGNhbiBjaG9vc2UgdG8gb25seSBwYXJ0aXRpb24gdGhhdCBzcGFj
ZS4KIyBUaGlzIGlzIG9ubHkgaG9ub3VyZWQgaWYgcGFydG1hbi1hdXRvL21ldGhvZCAoYmVsb3cp
IGlzIG5vdCBzZXQuCiNkLWkgcGFydG1hbi1hdXRvL2luaXRfYXV0b21hdGljYWxseV9wYXJ0aXRp
b24gc2VsZWN0IGJpZ2dlc3RfZnJlZQoKIyBBbHRlcm5hdGl2ZWx5LCB5b3UgbWF5IHNwZWNpZnkg
YSBkaXNrIHRvIHBhcnRpdGlvbi4gSWYgdGhlIHN5c3RlbSBoYXMgb25seQojIG9uZSBkaXNrIHRo
ZSBpbnN0YWxsZXIgd2lsbCBkZWZhdWx0IHRvIHVzaW5nIHRoYXQsIGJ1dCBvdGhlcndpc2UgdGhl
IGRldmljZQojIG5hbWUgbXVzdCBiZSBnaXZlbiBpbiB0cmFkaXRpb25hbCwgbm9uLWRldmZzIGZv
cm1hdCAoc28gZS5nLiAvZGV2L3NkYQojIGFuZCBub3QgZS5nLiAvZGV2L2Rpc2NzL2Rpc2MwL2Rp
c2MpLgojIEZvciBleGFtcGxlLCB0byB1c2UgdGhlIGZpcnN0IFNDU0kvU0FUQSBoYXJkIGRpc2s6
CiNkLWkgcGFydG1hbi1hdXRvL2Rpc2sgc3RyaW5nIC9kZXYvc2RhCiMgSW4gYWRkaXRpb24sIHlv
dSdsbCBuZWVkIHRvIHNwZWNpZnkgdGhlIG1ldGhvZCB0byB1c2UuCiMgVGhlIHByZXNlbnRseSBh
dmFpbGFibGUgbWV0aG9kcyBhcmU6CiMgLSByZWd1bGFyOiB1c2UgdGhlIHVzdWFsIHBhcnRpdGlv
biB0eXBlcyBmb3IgeW91ciBhcmNoaXRlY3R1cmUKIyAtIGx2bTogICAgIHVzZSBMVk0gdG8gcGFy
dGl0aW9uIHRoZSBkaXNrCiMgLSBjcnlwdG86ICB1c2UgTFZNIHdpdGhpbiBhbiBlbmNyeXB0ZWQg
cGFydGl0aW9uCiNkLWkgcGFydG1hbi1hdXRvL21ldGhvZCBzdHJpbmcgbHZtCgojIElmIG9uZSBv
ZiB0aGUgZGlza3MgdGhhdCBhcmUgZ29pbmcgdG8gYmUgYXV0b21hdGljYWxseSBwYXJ0aXRpb25l
ZAojIGNvbnRhaW5zIGFuIG9sZCBMVk0gY29uZmlndXJhdGlvbiwgdGhlIHVzZXIgd2lsbCBub3Jt
YWxseSByZWNlaXZlIGEKIyB3YXJuaW5nLiBUaGlzIGNhbiBiZSBwcmVzZWVkZWQgYXdheS4uLgoj
ZC1pIHBhcnRtYW4tbHZtL2RldmljZV9yZW1vdmVfbHZtIGJvb2xlYW4gdHJ1ZQojIFRoZSBzYW1l
IGFwcGxpZXMgdG8gcHJlLWV4aXN0aW5nIHNvZnR3YXJlIFJBSUQgYXJyYXk6CiNkLWkgcGFydG1h
bi1tZC9kZXZpY2VfcmVtb3ZlX21kIGJvb2xlYW4gdHJ1ZQojIEFuZCB0aGUgc2FtZSBnb2VzIGZv
ciB0aGUgY29uZmlybWF0aW9uIHRvIHdyaXRlIHRoZSBsdm0gcGFydGl0aW9ucy4KI2QtaSBwYXJ0
bWFuLWx2bS9jb25maXJtIGJvb2xlYW4gdHJ1ZQojZC1pIHBhcnRtYW4tbHZtL2NvbmZpcm1fbm9v
dmVyd3JpdGUgYm9vbGVhbiB0cnVlCgojIFlvdSBjYW4gY2hvb3NlIG9uZSBvZiB0aGUgdGhyZWUg
cHJlZGVmaW5lZCBwYXJ0aXRpb25pbmcgcmVjaXBlczoKIyAtIGF0b21pYzogYWxsIGZpbGVzIGlu
IG9uZSBwYXJ0aXRpb24KIyAtIGhvbWU6ICAgc2VwYXJhdGUgL2hvbWUgcGFydGl0aW9uCiMgLSBt
dWx0aTogIHNlcGFyYXRlIC9ob21lLCAvdmFyLCBhbmQgL3RtcCBwYXJ0aXRpb25zCiNkLWkgcGFy
dG1hbi1hdXRvL2Nob29zZV9yZWNpcGUgc2VsZWN0IGF0b21pYwoKIyBPciBwcm92aWRlIGEgcmVj
aXBlIG9mIHlvdXIgb3duLi4uCiMgSWYgeW91IGhhdmUgYSB3YXkgdG8gZ2V0IGEgcmVjaXBlIGZp
bGUgaW50byB0aGUgZC1pIGVudmlyb25tZW50LCB5b3UgY2FuCiMganVzdCBwb2ludCBhdCBpdC4K
I2QtaSBwYXJ0bWFuLWF1dG8vZXhwZXJ0X3JlY2lwZV9maWxlIHN0cmluZyAvaGQtbWVkaWEvcmVj
aXBlCgojIElmIG5vdCwgeW91IGNhbiBwdXQgYW4gZW50aXJlIHJlY2lwZSBpbnRvIHRoZSBwcmVj
b25maWd1cmF0aW9uIGZpbGUgaW4gb25lCiMgKGxvZ2ljYWwpIGxpbmUuIFRoaXMgZXhhbXBsZSBj
cmVhdGVzIGEgc21hbGwgL2Jvb3QgcGFydGl0aW9uLCBzdWl0YWJsZQojIHN3YXAsIGFuZCB1c2Vz
IHRoZSByZXN0IG9mIHRoZSBzcGFjZSBmb3IgdGhlIHJvb3QgcGFydGl0aW9uOgojZC1pIHBhcnRt
YW4tYXV0by9leHBlcnRfcmVjaXBlIHN0cmluZyAgICAgICAgICAgICAgICAgICAgICAgICBcCiMg
ICAgICBib290LXJvb3QgOjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIFwKIyAgICAgICAgICAgICAgNDAgNTAgMTAwIGV4dDMgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgXAojICAgICAgICAgICAgICAgICAgICAgICRwcmltYXJ5eyB9ICRib290YWJs
ZXsgfSAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgICAgICAgICAgICAgbWV0aG9keyBmb3Jt
YXQgfSBmb3JtYXR7IH0gICAgICAgICAgICAgIFwKIyAgICAgICAgICAgICAgICAgICAgICB1c2Vf
ZmlsZXN5c3RlbXsgfSBmaWxlc3lzdGVteyBleHQzIH0gICAgXAojICAgICAgICAgICAgICAgICAg
ICAgIG1vdW50cG9pbnR7IC9ib290IH0gICAgICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAg
ICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKIyAg
ICAgICAgICAgICAgNTAwIDEwMDAwIDEwMDAwMDAwMDAgZXh0MyAgICAgICAgICAgICAgICAgICAg
ICAgXAojICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHsgZm9ybWF0IH0gZm9ybWF0eyB9ICAg
ICAgICAgICAgICBcCiMgICAgICAgICAgICAgICAgICAgICAgdXNlX2ZpbGVzeXN0ZW17IH0gZmls
ZXN5c3RlbXsgZXh0MyB9ICAgIFwKIyAgICAgICAgICAgICAgICAgICAgICBtb3VudHBvaW50eyAv
IH0gICAgICAgICAgICAgICAgICAgICAgICAgXAojICAgICAgICAgICAgICAuICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgICAgIDY0IDUx
MiAzMDAlIGxpbnV4LXN3YXAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKIyAgICAgICAgICAg
ICAgICAgICAgICBtZXRob2R7IHN3YXAgfSBmb3JtYXR7IH0gICAgICAgICAgICAgICAgXAojICAg
ICAgICAgICAgICAuCgojIFRoZSBmdWxsIHJlY2lwZSBmb3JtYXQgaXMgZG9jdW1lbnRlZCBpbiB0
aGUgZmlsZSBwYXJ0bWFuLWF1dG8tcmVjaXBlLnR4dAojIGluY2x1ZGVkIGluIHRoZSAnZGViaWFu
LWluc3RhbGxlcicgcGFja2FnZSBvciBhdmFpbGFibGUgZnJvbSBELUkgc291cmNlCiMgcmVwb3Np
dG9yeS4gVGhpcyBhbHNvIGRvY3VtZW50cyBob3cgdG8gc3BlY2lmeSBzZXR0aW5ncyBzdWNoIGFz
IGZpbGUKIyBzeXN0ZW0gbGFiZWxzLCB2b2x1bWUgZ3JvdXAgbmFtZXMgYW5kIHdoaWNoIHBoeXNp
Y2FsIGRldmljZXMgdG8gaW5jbHVkZQojIGluIGEgdm9sdW1lIGdyb3VwLgoKIyBUaGlzIG1ha2Vz
IHBhcnRtYW4gYXV0b21hdGljYWxseSBwYXJ0aXRpb24gd2l0aG91dCBjb25maXJtYXRpb24sIHBy
b3ZpZGVkCiMgdGhhdCB5b3UgdG9sZCBpdCB3aGF0IHRvIGRvIHVzaW5nIG9uZSBvZiB0aGUgbWV0
aG9kcyBhYm92ZS4KI2QtaSBwYXJ0bWFuLXBhcnRpdGlvbmluZy9jb25maXJtX3dyaXRlX25ld19s
YWJlbCBib29sZWFuIHRydWUKI2QtaSBwYXJ0bWFuL2Nob29zZV9wYXJ0aXRpb24gc2VsZWN0IGZp
bmlzaAojZC1pIHBhcnRtYW4vY29uZmlybSBib29sZWFuIHRydWUKI2QtaSBwYXJ0bWFuL2NvbmZp
cm1fbm9vdmVyd3JpdGUgYm9vbGVhbiB0cnVlCgojIFdoZW4gZGlzayBlbmNyeXB0aW9uIGlzIGVu
YWJsZWQsIHNraXAgd2lwaW5nIHRoZSBwYXJ0aXRpb25zIGJlZm9yZWhhbmQuCiNkLWkgcGFydG1h
bi1hdXRvLWNyeXB0by9lcmFzZV9kaXNrcyBib29sZWFuIGZhbHNlCgojIyBQYXJ0aXRpb25pbmcg
dXNpbmcgUkFJRAojIFRoZSBtZXRob2Qgc2hvdWxkIGJlIHNldCB0byAicmFpZCIuCiNkLWkgcGFy
dG1hbi1hdXRvL21ldGhvZCBzdHJpbmcgcmFpZAojIFNwZWNpZnkgdGhlIGRpc2tzIHRvIGJlIHBh
cnRpdGlvbmVkLiBUaGV5IHdpbGwgYWxsIGdldCB0aGUgc2FtZSBsYXlvdXQsCiMgc28gdGhpcyB3
aWxsIG9ubHkgd29yayBpZiB0aGUgZGlza3MgYXJlIHRoZSBzYW1lIHNpemUuCiNkLWkgcGFydG1h
bi1hdXRvL2Rpc2sgc3RyaW5nIC9kZXYvc2RhIC9kZXYvc2RiCgojIE5leHQgeW91IG5lZWQgdG8g
c3BlY2lmeSB0aGUgcGh5c2ljYWwgcGFydGl0aW9ucyB0aGF0IHdpbGwgYmUgdXNlZC4gCiNkLWkg
cGFydG1hbi1hdXRvL2V4cGVydF9yZWNpcGUgc3RyaW5nIFwKIyAgICAgIG11bHRpcmFpZCA6OiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAojICAgICAgICAgICAgICAx
MDAwIDUwMDAgNDAwMCByYWlkICAgICAgICAgICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAg
ICAgICAgICAgICAgJHByaW1hcnl7IH0gbWV0aG9keyByYWlkIH0gICAgICAgICAgIFwKIyAgICAg
ICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAoj
ICAgICAgICAgICAgICA2NCA1MTIgMzAwJSByYWlkICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBcCiMgICAgICAgICAgICAgICAgICAgICAgbWV0aG9keyByYWlkIH0gICAgICAgICAgICAgICAg
ICAgICAgIFwKIyAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgXAojICAgICAgICAgICAgICA1MDAgMTAwMDAgMTAwMDAwMDAwMCByYWlkICAg
ICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgICAgICAgICAgICAgbWV0aG9keyByYWlkIH0g
ICAgICAgICAgICAgICAgICAgICAgIFwKIyAgICAgICAgICAgICAgLgoKIyBMYXN0IHlvdSBuZWVk
IHRvIHNwZWNpZnkgaG93IHRoZSBwcmV2aW91c2x5IGRlZmluZWQgcGFydGl0aW9ucyB3aWxsIGJl
CiMgdXNlZCBpbiB0aGUgUkFJRCBzZXR1cC4gUmVtZW1iZXIgdG8gdXNlIHRoZSBjb3JyZWN0IHBh
cnRpdGlvbiBudW1iZXJzCiMgZm9yIGxvZ2ljYWwgcGFydGl0aW9ucy4gUkFJRCBsZXZlbHMgMCwg
MSwgNSwgNiBhbmQgMTAgYXJlIHN1cHBvcnRlZDsKIyBkZXZpY2VzIGFyZSBzZXBhcmF0ZWQgdXNp
bmcgIiMiLgojIFBhcmFtZXRlcnMgYXJlOgojIDxyYWlkdHlwZT4gPGRldmNvdW50PiA8c3BhcmVj
b3VudD4gPGZzdHlwZT4gPG1vdW50cG9pbnQ+IFwKIyAgICAgICAgICA8ZGV2aWNlcz4gPHNwYXJl
ZGV2aWNlcz4KCiNkLWkgcGFydG1hbi1hdXRvLXJhaWQvcmVjaXBlIHN0cmluZyBcCiMgICAgMSAy
IDAgZXh0MyAvICAgICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgL2Rldi9zZGExIy9kZXYv
c2RiMSAgICAgICBcCiMgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiMgICAg
MSAyIDAgc3dhcCAtICAgICAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgL2Rldi9zZGE1Iy9k
ZXYvc2RiNSAgICAgICBcCiMgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiMg
ICAgMCAyIDAgZXh0MyAvaG9tZSAgICAgICAgICAgICAgICBcCiMgICAgICAgICAgL2Rldi9zZGE2
Iy9kZXYvc2RiNiAgICAgICBcCiMgICAgLgoKIyBGb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBz
ZWUgdGhlIGZpbGUgcGFydG1hbi1hdXRvLXJhaWQtcmVjaXBlLnR4dAojIGluY2x1ZGVkIGluIHRo
ZSAnZGViaWFuLWluc3RhbGxlcicgcGFja2FnZSBvciBhdmFpbGFibGUgZnJvbSBELUkgc291cmNl
CiMgcmVwb3NpdG9yeS4KCiMgVGhpcyBtYWtlcyBwYXJ0bWFuIGF1dG9tYXRpY2FsbHkgcGFydGl0
aW9uIHdpdGhvdXQgY29uZmlybWF0aW9uLgojZC1pIHBhcnRtYW4tbWQvY29uZmlybSBib29sZWFu
IHRydWUKI2QtaSBwYXJ0bWFuLXBhcnRpdGlvbmluZy9jb25maXJtX3dyaXRlX25ld19sYWJlbCBi
b29sZWFuIHRydWUKI2QtaSBwYXJ0bWFuL2Nob29zZV9wYXJ0aXRpb24gc2VsZWN0IGZpbmlzaAoj
ZC1pIHBhcnRtYW4vY29uZmlybSBib29sZWFuIHRydWUKI2QtaSBwYXJ0bWFuL2NvbmZpcm1fbm9v
dmVyd3JpdGUgYm9vbGVhbiB0cnVlCgojIyBDb250cm9sbGluZyBob3cgcGFydGl0aW9ucyBhcmUg
bW91bnRlZAojIFRoZSBkZWZhdWx0IGlzIHRvIG1vdW50IGJ5IFVVSUQsIGJ1dCB5b3UgY2FuIGFs
c28gY2hvb3NlICJ0cmFkaXRpb25hbCIgdG8KIyB1c2UgdHJhZGl0aW9uYWwgZGV2aWNlIG5hbWVz
LCBvciAibGFiZWwiIHRvIHRyeSBmaWxlc3lzdGVtIGxhYmVscyBiZWZvcmUKIyBmYWxsaW5nIGJh
Y2sgdG8gVVVJRHMuCiNkLWkgcGFydG1hbi9tb3VudF9zdHlsZSBzZWxlY3QgdXVpZAoKIyMjIEJh
c2Ugc3lzdGVtIGluc3RhbGxhdGlvbgojIENvbmZpZ3VyZSBBUFQgdG8gbm90IGluc3RhbGwgcmVj
b21tZW5kZWQgcGFja2FnZXMgYnkgZGVmYXVsdC4gVXNlIG9mIHRoaXMKIyBvcHRpb24gY2FuIHJl
c3VsdCBpbiBhbiBpbmNvbXBsZXRlIHN5c3RlbSBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSB2
ZXJ5CiMgZXhwZXJpZW5jZWQgdXNlcnMuCiNkLWkgYmFzZS1pbnN0YWxsZXIvaW5zdGFsbC1yZWNv
bW1lbmRzIGJvb2xlYW4gZmFsc2UKCiMgVGhlIGtlcm5lbCBpbWFnZSAobWV0YSkgcGFja2FnZSB0
byBiZSBpbnN0YWxsZWQ7ICJub25lIiBjYW4gYmUgdXNlZCBpZiBubwojIGtlcm5lbCBpcyB0byBi
ZSBpbnN0YWxsZWQuCiNkLWkgYmFzZS1pbnN0YWxsZXIva2VybmVsL2ltYWdlIHN0cmluZyBsaW51
eC1pbWFnZS02ODYKCiMjIyBBcHQgc2V0dXAKIyBZb3UgY2FuIGNob29zZSB0byBpbnN0YWxsIG5v
bi1mcmVlIGFuZCBjb250cmliIHNvZnR3YXJlLgpkLWkgYXB0LXNldHVwL25vbi1mcmVlIGJvb2xl
YW4gdHJ1ZQpkLWkgYXB0LXNldHVwL2NvbnRyaWIgYm9vbGVhbiB0cnVlCiMgVW5jb21tZW50IHRo
aXMgaWYgeW91IGRvbid0IHdhbnQgdG8gdXNlIGEgbmV0d29yayBtaXJyb3IuCiNkLWkgYXB0LXNl
dHVwL3VzZV9taXJyb3IgYm9vbGVhbiBmYWxzZQojIFNlbGVjdCB3aGljaCB1cGRhdGUgc2Vydmlj
ZXMgdG8gdXNlOyBkZWZpbmUgdGhlIG1pcnJvcnMgdG8gYmUgdXNlZC4KIyBWYWx1ZXMgc2hvd24g
YmVsb3cgYXJlIHRoZSBub3JtYWwgZGVmYXVsdHMuCmQtaSBhcHQtc2V0dXAvc2VydmljZXMtc2Vs
ZWN0IG5vbmUKI2QtaSBhcHQtc2V0dXAvc2VjdXJpdHlfaG9zdCBzdHJpbmcgc2VjdXJpdHkuZGVi
aWFuLm9yZwoKIyBBZGRpdGlvbmFsIHJlcG9zaXRvcmllcywgbG9jYWxbMC05XSBhdmFpbGFibGUK
I2QtaSBhcHQtc2V0dXAvbG9jYWwwL3JlcG9zaXRvcnkgc3RyaW5nIFwKIyAgICAgICBodHRwOi8v
bG9jYWwuc2VydmVyL2RlYmlhbiBzdGFibGUgbWFpbgojZC1pIGFwdC1zZXR1cC9sb2NhbDAvY29t
bWVudCBzdHJpbmcgbG9jYWwgc2VydmVyCiMgRW5hYmxlIGRlYi1zcmMgbGluZXMKI2QtaSBhcHQt
c2V0dXAvbG9jYWwwL3NvdXJjZSBib29sZWFuIHRydWUKIyBVUkwgdG8gdGhlIHB1YmxpYyBrZXkg
b2YgdGhlIGxvY2FsIHJlcG9zaXRvcnk7IHlvdSBtdXN0IHByb3ZpZGUgYSBrZXkgb3IKIyBhcHQg
d2lsbCBjb21wbGFpbiBhYm91dCB0aGUgdW5hdXRoZW50aWNhdGVkIHJlcG9zaXRvcnkgYW5kIHNv
IHRoZQojIHNvdXJjZXMubGlzdCBsaW5lIHdpbGwgYmUgbGVmdCBjb21tZW50ZWQgb3V0CiNkLWkg
YXB0LXNldHVwL2xvY2FsMC9rZXkgc3RyaW5nIGh0dHA6Ly9sb2NhbC5zZXJ2ZXIva2V5CgojIEJ5
IGRlZmF1bHQgdGhlIGluc3RhbGxlciByZXF1aXJlcyB0aGF0IHJlcG9zaXRvcmllcyBiZSBhdXRo
ZW50aWNhdGVkCiMgdXNpbmcgYSBrbm93biBncGcga2V5LiBUaGlzIHNldHRpbmcgY2FuIGJlIHVz
ZWQgdG8gZGlzYWJsZSB0aGF0CiMgYXV0aGVudGljYXRpb24uIFdhcm5pbmc6IEluc2VjdXJlLCBu
b3QgcmVjb21tZW5kZWQuCmQtaSBkZWJpYW4taW5zdGFsbGVyL2FsbG93X3VuYXV0aGVudGljYXRl
ZCBib29sZWFuIHRydWUKCiMgVW5jb21tZW50IHRoaXMgdG8gYWRkIG11bHRpYXJjaCBjb25maWd1
cmF0aW9uIGZvciBpMzg2CiNkLWkgYXB0LXNldHVwL211bHRpYXJjaCBzdHJpbmcgaTM4NgoKCiMj
IyBQYWNrYWdlIHNlbGVjdGlvbgojdGFza3NlbCB0YXNrc2VsL2ZpcnN0IG11bHRpc2VsZWN0IHN0
YW5kYXJkLCB3ZWItc2VydmVyLCBrZGUtZGVza3RvcAoKIyBJbmRpdmlkdWFsIGFkZGl0aW9uYWwg
cGFja2FnZXMgdG8gaW5zdGFsbAojZC1pIHBrZ3NlbC9pbmNsdWRlIHN0cmluZyBvcGVuc3NoLXNl
cnZlciBidWlsZC1lc3NlbnRpYWwKIyBXaGV0aGVyIHRvIHVwZ3JhZGUgcGFja2FnZXMgYWZ0ZXIg
ZGVib290c3RyYXAuCiMgQWxsb3dlZCB2YWx1ZXM6IG5vbmUsIHNhZmUtdXBncmFkZSwgZnVsbC11
cGdyYWRlCiNkLWkgcGtnc2VsL3VwZ3JhZGUgc2VsZWN0IG5vbmUKCiMgU29tZSB2ZXJzaW9ucyBv
ZiB0aGUgaW5zdGFsbGVyIGNhbiByZXBvcnQgYmFjayBvbiB3aGF0IHNvZnR3YXJlIHlvdSBoYXZl
CiMgaW5zdGFsbGVkLCBhbmQgd2hhdCBzb2Z0d2FyZSB5b3UgdXNlLiBUaGUgZGVmYXVsdCBpcyBu
b3QgdG8gcmVwb3J0IGJhY2ssCiMgYnV0IHNlbmRpbmcgcmVwb3J0cyBoZWxwcyB0aGUgcHJvamVj
dCBkZXRlcm1pbmUgd2hhdCBzb2Z0d2FyZSBpcyBtb3N0CiMgcG9wdWxhciBhbmQgaW5jbHVkZSBp
dCBvbiBDRHMuCnBvcHVsYXJpdHktY29udGVzdCBwb3B1bGFyaXR5LWNvbnRlc3QvcGFydGljaXBh
dGUgYm9vbGVhbiBmYWxzZQoKIyMjIEJvb3QgbG9hZGVyIGluc3RhbGxhdGlvbgojIEdydWIgaXMg
dGhlIGRlZmF1bHQgYm9vdCBsb2FkZXIgKGZvciB4ODYpLiBJZiB5b3Ugd2FudCBsaWxvIGluc3Rh
bGxlZAojIGluc3RlYWQsIHVuY29tbWVudCB0aGlzOgojZC1pIGdydWItaW5zdGFsbGVyL3NraXAg
Ym9vbGVhbiB0cnVlCiMgVG8gYWxzbyBza2lwIGluc3RhbGxpbmcgbGlsbywgYW5kIGluc3RhbGwg
bm8gYm9vdGxvYWRlciwgdW5jb21tZW50IHRoaXMKIyB0b286CiNkLWkgbGlsby1pbnN0YWxsZXIv
c2tpcCBib29sZWFuIHRydWUKCgojIFRoaXMgaXMgZmFpcmx5IHNhZmUgdG8gc2V0LCBpdCBtYWtl
cyBncnViIGluc3RhbGwgYXV0b21hdGljYWxseSB0byB0aGUgTUJSCiMgaWYgbm8gb3RoZXIgb3Bl
cmF0aW5nIHN5c3RlbSBpcyBkZXRlY3RlZCBvbiB0aGUgbWFjaGluZS4KI2QtaSBncnViLWluc3Rh
bGxlci9vbmx5X2RlYmlhbiBib29sZWFuIHRydWUKCiMgVGhpcyBvbmUgbWFrZXMgZ3J1Yi1pbnN0
YWxsZXIgaW5zdGFsbCB0byB0aGUgTUJSIGlmIGl0IGFsc28gZmluZHMgc29tZSBvdGhlcgojIE9T
LCB3aGljaCBpcyBsZXNzIHNhZmUgYXMgaXQgbWlnaHQgbm90IGJlIGFibGUgdG8gYm9vdCB0aGF0
IG90aGVyIE9TLgojZC1pIGdydWItaW5zdGFsbGVyL3dpdGhfb3RoZXJfb3MgYm9vbGVhbiB0cnVl
CgojIER1ZSBub3RhYmx5IHRvIHBvdGVudGlhbCBVU0Igc3RpY2tzLCB0aGUgbG9jYXRpb24gb2Yg
dGhlIE1CUiBjYW4gbm90IGJlCiMgZGV0ZXJtaW5lZCBzYWZlbHkgaW4gZ2VuZXJhbCwgc28gdGhp
cyBuZWVkcyB0byBiZSBzcGVjaWZpZWQ6CiNkLWkgZ3J1Yi1pbnN0YWxsZXIvYm9vdGRldiAgc3Ry
aW5nIC9kZXYvc2RhCiMgVG8gaW5zdGFsbCB0byB0aGUgZmlyc3QgZGV2aWNlIChhc3N1bWluZyBp
dCBpcyBub3QgYSBVU0Igc3RpY2spOgojZC1pIGdydWItaW5zdGFsbGVyL2Jvb3RkZXYgIHN0cmlu
ZyBkZWZhdWx0CgojIEFsdGVybmF0aXZlbHksIGlmIHlvdSB3YW50IHRvIGluc3RhbGwgdG8gYSBs
b2NhdGlvbiBvdGhlciB0aGFuIHRoZSBtYnIsCiMgdW5jb21tZW50IGFuZCBlZGl0IHRoZXNlIGxp
bmVzOgojZC1pIGdydWItaW5zdGFsbGVyL29ubHlfZGViaWFuIGJvb2xlYW4gZmFsc2UKI2QtaSBn
cnViLWluc3RhbGxlci93aXRoX290aGVyX29zIGJvb2xlYW4gZmFsc2UKI2QtaSBncnViLWluc3Rh
bGxlci9ib290ZGV2ICBzdHJpbmcgKGhkMCwxKQojIFRvIGluc3RhbGwgZ3J1YiB0byBtdWx0aXBs
ZSBkaXNrczoKI2QtaSBncnViLWluc3RhbGxlci9ib290ZGV2ICBzdHJpbmcgKGhkMCwxKSAoaGQx
LDEpIChoZDIsMSkKCiMgT3B0aW9uYWwgcGFzc3dvcmQgZm9yIGdydWIsIGVpdGhlciBpbiBjbGVh
ciB0ZXh0CiNkLWkgZ3J1Yi1pbnN0YWxsZXIvcGFzc3dvcmQgcGFzc3dvcmQgcjAwdG1lCiNkLWkg
Z3J1Yi1pbnN0YWxsZXIvcGFzc3dvcmQtYWdhaW4gcGFzc3dvcmQgcjAwdG1lCiMgb3IgZW5jcnlw
dGVkIHVzaW5nIGFuIE1ENSBoYXNoLCBzZWUgZ3J1Yi1tZDUtY3J5cHQoOCkuCiNkLWkgZ3J1Yi1p
bnN0YWxsZXIvcGFzc3dvcmQtY3J5cHRlZCBwYXNzd29yZCBbTUQ1IGhhc2hdCgojIFVzZSB0aGUg
Zm9sbG93aW5nIG9wdGlvbiB0byBhZGQgYWRkaXRpb25hbCBib290IHBhcmFtZXRlcnMgZm9yIHRo
ZQojIGluc3RhbGxlZCBzeXN0ZW0gKGlmIHN1cHBvcnRlZCBieSB0aGUgYm9vdGxvYWRlciBpbnN0
YWxsZXIpLgojIE5vdGU6IG9wdGlvbnMgcGFzc2VkIHRvIHRoZSBpbnN0YWxsZXIgd2lsbCBiZSBh
ZGRlZCBhdXRvbWF0aWNhbGx5LgojZC1pIGRlYmlhbi1pbnN0YWxsZXIvYWRkLWtlcm5lbC1vcHRz
IHN0cmluZyBub3VzYgoKIyMjIEZpbmlzaGluZyB1cCB0aGUgaW5zdGFsbGF0aW9uCiMgRHVyaW5n
IGluc3RhbGxhdGlvbnMgZnJvbSBzZXJpYWwgY29uc29sZSwgdGhlIHJlZ3VsYXIgdmlydHVhbCBj
b25zb2xlcwojIChWVDEtVlQ2KSBhcmUgbm9ybWFsbHkgZGlzYWJsZWQgaW4gL2V0Yy9pbml0dGFi
LiBVbmNvbW1lbnQgdGhlIG5leHQKIyBsaW5lIHRvIHByZXZlbnQgdGhpcy4KI2QtaSBmaW5pc2gt
aW5zdGFsbC9rZWVwLWNvbnNvbGVzIGJvb2xlYW4gdHJ1ZQoKIyBBdm9pZCB0aGF0IGxhc3QgbWVz
c2FnZSBhYm91dCB0aGUgaW5zdGFsbCBiZWluZyBjb21wbGV0ZS4KI2QtaSBmaW5pc2gtaW5zdGFs
bC9yZWJvb3RfaW5fcHJvZ3Jlc3Mgbm90ZQoKIyBUaGlzIHdpbGwgcHJldmVudCB0aGUgaW5zdGFs
bGVyIGZyb20gZWplY3RpbmcgdGhlIENEIGR1cmluZyB0aGUgcmVib290LAojIHdoaWNoIGlzIHVz
ZWZ1bCBpbiBzb21lIHNpdHVhdGlvbnMuCiNkLWkgY2Ryb20tZGV0ZWN0L2VqZWN0IGJvb2xlYW4g
ZmFsc2UKCiMgVGhpcyBpcyBob3cgdG8gbWFrZSB0aGUgaW5zdGFsbGVyIHNodXRkb3duIHdoZW4g
ZmluaXNoZWQsIGJ1dCBub3QKIyByZWJvb3QgaW50byB0aGUgaW5zdGFsbGVkIHN5c3RlbS4KI2Qt
aSBkZWJpYW4taW5zdGFsbGVyL2V4aXQvaGFsdCBib29sZWFuIHRydWUKIyBUaGlzIHdpbGwgcG93
ZXIgb2ZmIHRoZSBtYWNoaW5lIGluc3RlYWQgb2YganVzdCBoYWx0aW5nIGl0LgojZC1pIGRlYmlh
bi1pbnN0YWxsZXIvZXhpdC9wb3dlcm9mZiBib29sZWFuIHRydWUKCiMjIyBQcmVzZWVkaW5nIG90
aGVyIHBhY2thZ2VzCiMgRGVwZW5kaW5nIG9uIHdoYXQgc29mdHdhcmUgeW91IGNob29zZSB0byBp
bnN0YWxsLCBvciBpZiB0aGluZ3MgZ28gd3JvbmcKIyBkdXJpbmcgdGhlIGluc3RhbGxhdGlvbiBw
cm9jZXNzLCBpdCdzIHBvc3NpYmxlIHRoYXQgb3RoZXIgcXVlc3Rpb25zIG1heQojIGJlIGFza2Vk
LiBZb3UgY2FuIHByZXNlZWQgdGhvc2UgdG9vLCBvZiBjb3Vyc2UuIFRvIGdldCBhIGxpc3Qgb2Yg
ZXZlcnkKIyBwb3NzaWJsZSBxdWVzdGlvbiB0aGF0IGNvdWxkIGJlIGFza2VkIGR1cmluZyBhbiBp
bnN0YWxsLCBkbyBhbgojIGluc3RhbGxhdGlvbiwgYW5kIHRoZW4gcnVuIHRoZXNlIGNvbW1hbmRz
OgojICAgZGViY29uZi1nZXQtc2VsZWN0aW9ucyAtLWluc3RhbGxlciA+IGZpbGUKIyAgIGRlYmNv
bmYtZ2V0LXNlbGVjdGlvbnMgPj4gZmlsZQoKCiMjIyMgQWR2YW5jZWQgb3B0aW9ucwojIyMgUnVu
bmluZyBjdXN0b20gY29tbWFuZHMgZHVyaW5nIHRoZSBpbnN0YWxsYXRpb24KIyBkLWkgcHJlc2Vl
ZGluZyBpcyBpbmhlcmVudGx5IG5vdCBzZWN1cmUuIE5vdGhpbmcgaW4gdGhlIGluc3RhbGxlciBj
aGVja3MKIyBmb3IgYXR0ZW1wdHMgYXQgYnVmZmVyIG92ZXJmbG93cyBvciBvdGhlciBleHBsb2l0
cyBvZiB0aGUgdmFsdWVzIG9mIGEKIyBwcmVjb25maWd1cmF0aW9uIGZpbGUgbGlrZSB0aGlzIG9u
ZS4gT25seSB1c2UgcHJlY29uZmlndXJhdGlvbiBmaWxlcyBmcm9tCiMgdHJ1c3RlZCBsb2NhdGlv
bnMhIFRvIGRyaXZlIHRoYXQgaG9tZSwgYW5kIGJlY2F1c2UgaXQncyBnZW5lcmFsbHkgdXNlZnVs
LAojIGhlcmUncyBhIHdheSB0byBydW4gYW55IHNoZWxsIGNvbW1hbmQgeW91J2QgbGlrZSBpbnNp
ZGUgdGhlIGluc3RhbGxlciwKIyBhdXRvbWF0aWNhbGx5LgoKIyBUaGlzIGZpcnN0IGNvbW1hbmQg
aXMgcnVuIGFzIGVhcmx5IGFzIHBvc3NpYmxlLCBqdXN0IGFmdGVyCiMgcHJlc2VlZGluZyBpcyBy
ZWFkLgojZC1pIHByZXNlZWQvZWFybHlfY29tbWFuZCBzdHJpbmcgYW5uYS1pbnN0YWxsIHNvbWUt
dWRlYgojIFRoaXMgY29tbWFuZCBpcyBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBwYXJ0aXRp
b25lciBzdGFydHMuIEl0IG1heSBiZQojIHVzZWZ1bCB0byBhcHBseSBkeW5hbWljIHBhcnRpdGlv
bmVyIHByZXNlZWRpbmcgdGhhdCBkZXBlbmRzIG9uIHRoZSBzdGF0ZQojIG9mIHRoZSBkaXNrcyAo
d2hpY2ggbWF5IG5vdCBiZSB2aXNpYmxlIHdoZW4gcHJlc2VlZC9lYXJseV9jb21tYW5kIHJ1bnMp
LgojZC1pIHBhcnRtYW4vZWFybHlfY29tbWFuZCBcCiMgICAgICAgc3RyaW5nIGRlYmNvbmYtc2V0
IHBhcnRtYW4tYXV0by9kaXNrICIkKGxpc3QtZGV2aWNlcyBkaXNrIHwgaGVhZCAtbjEpIgojIFRo
aXMgY29tbWFuZCBpcyBydW4ganVzdCBiZWZvcmUgdGhlIGluc3RhbGwgZmluaXNoZXMsIGJ1dCB3
aGVuIHRoZXJlIGlzCiMgc3RpbGwgYSB1c2FibGUgL3RhcmdldCBkaXJlY3RvcnkuIFlvdSBjYW4g
Y2hyb290IHRvIC90YXJnZXQgYW5kIHVzZSBpdAojIGRpcmVjdGx5LCBvciB1c2UgdGhlIGFwdC1p
bnN0YWxsIGFuZCBpbi10YXJnZXQgY29tbWFuZHMgdG8gZWFzaWx5IGluc3RhbGwKIyBwYWNrYWdl
cyBhbmQgcnVuIGNvbW1hbmRzIGluIHRoZSB0YXJnZXQgc3lzdGVtLgojZC1pIHByZXNlZWQvbGF0
ZV9jb21tYW5kIHN0cmluZyBhcHQtaW5zdGFsbCB6c2g7IGluLXRhcmdldCBjaHNoIC1zIC9iaW4v
enNoCgo='



# STARTME
main $@
